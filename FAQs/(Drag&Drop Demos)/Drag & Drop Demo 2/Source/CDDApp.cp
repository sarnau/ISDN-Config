//	===============//	== CDDApp.cp ==			©1994 Gilles Dignard. All Rights Reserved//	===============////	Demonstration code for Drag and Drop was created by and is the copyright of:////		Gilles Dignard//		1306-270 Queens Quay West,//		Toronto, Ontario//		M5J 2N4////		gdignard@hookup.net////		(416) 260-0480////	Please feel free to use the code I've written in any way you see fit. The only//	exception is where my code contstitues the principal value of the work (such//	as this demo). Then all accreditation, comments, and ReadMe files must be//	included unchanged.////	The general nature of the above is limited, naturally, by the fact that this code//	depends on code written and owned by Metrowerks (PowerPlant), and code written//	and owned by Apple (Drag and Drop). If you don't already have the right to use either//	of these two products in any particular manner, I obviously can't give it to you.////	NB: In my comments, MD+DDK == Macintosh Drag and Drop Developer's Kit, version 1.1//		Available (free!) in Apple DocViewer format on the MW CD in É:System Extras Ä:Drag Manager://		Also available (not free!) from APDA in printed format.//#include <Dialogs.h>#include <Fonts.h>#include <LClipboard.h>#include <LDragAndDrop.h>#include <LWindow.h>#include <LGrowZone.h>#include <UDrawingState.h>#include <UMemoryMgr.h>#include <UDesktop.h>#include <URegistrar.h>#include <UReanimator.h>#include <PP_Messages.h>#include "CDDApp.h"#include "CDDView.h"#include "Drag&Drop.h"Boolean gPlayDropSound = true;Boolean gPlayEnterSound = false;Boolean gPlayExitSound = false;Boolean gUseLDragTask = false;// ===========================================================================//		¥ Main Program// ===========================================================================void main(void){	InitializeHeap(3);	UQDGlobals::InitializeToolbox(&qd);	new LGrowZone(20000);		//	// If drag and drop isn't present, apologize and don't even bother to run the app.	//	if (!LDragAndDrop::DragAndDropIsPresent()) {		UDesktop::Deactivate();		::Alert(10000, nil);		UDesktop::Activate();	} else {		CDDApp	theApp;		theApp.Run();	}}// ---------------------------------------------------------------------------//		¥ CDDApp// ---------------------------------------------------------------------------//	Default constructorCDDApp::CDDApp(){	// Register the classes we'll be using Reanimator to create	URegistrar::RegisterClass('wind', LWindow::CreateWindowStream);	URegistrar::RegisterClass('DnDV', CDDView::CreateDDViewStream);		// Build our clipboard	new LClipboard();}// ---------------------------------------------------------------------------//		¥ ~CDDApp// ---------------------------------------------------------------------------//	Destructor//CDDApp::~CDDApp(){}voidCDDApp::FindCommandStatus(	CommandT	inCommand,	Boolean		&outEnabled,	Boolean		&outUsesMark,	Char16		&outMark,	Str255		outName){	outUsesMark = false;	switch (inCommand) {		case cmd_New:			outEnabled = true;			break;		case cmd_FlipDropSound:			outUsesMark = true;			outMark = (gPlayDropSound ? checkMark : noMark);			outEnabled = true;			break;		case cmd_FlipEnterSound:			outUsesMark = true;			outMark = (gPlayEnterSound ? checkMark : noMark);			outEnabled = true;			break;		case cmd_FlipExitSound:			outUsesMark = true;			outMark = (gPlayExitSound ? checkMark : noMark);			outEnabled = true;			break;		case cmd_LDragTask:			outUsesMark = true;			outMark = (gUseLDragTask ? checkMark : noMark);			outEnabled = true;			break;		case cmd_CDDTask:			outUsesMark = true;			outMark = (gUseLDragTask ? noMark : checkMark);			outEnabled = true;			break;		default:			LDocApplication::FindCommandStatus(inCommand, outEnabled,											outUsesMark, outMark, outName);			break;	}}BooleanCDDApp::ObeyCommand(	CommandT	inCommand,	void		*ioParam){	Boolean		cmdHandled = true;	switch (inCommand) {		case cmd_New:			LWindow* theWindow = LWindow::CreateWindow(Wind_DragAndDrop, this);			ThrowIf_(theWindow == nil);						CDDView* theView = (CDDView*) theWindow->FindPaneByID(pane_DragView);			ThrowIf_(theView == nil);						SwitchTarget(theView);			break;		case cmd_FlipDropSound:			gPlayDropSound = !gPlayDropSound;			break;		case cmd_FlipEnterSound:			gPlayEnterSound = !gPlayEnterSound;			break;		case cmd_FlipExitSound:			gPlayExitSound = !gPlayExitSound;			break;		case cmd_LDragTask:		case cmd_CDDTask:			gUseLDragTask = (inCommand == cmd_LDragTask);			break;		default:			cmdHandled = LDocApplication::ObeyCommand(inCommand, ioParam);			break;	}	return cmdHandled;}