// ===========================================================================//	CISDNAnlageIconView.cp				©1994 Metrowerks Inc. All rights reserved.// ===========================================================================////	Subclass of LTextEdit which keeps track of whether the text is dirty//	(i.e., the user has made changes since last save)#include "CISDNAnlageIconView.h"#include "CISDNDesktop.h"#include "CIconButton.h"#include <LGroupBox.h>bool    CISDNAnlageIconView::sRegisterClass = PPFactory<CISDNAnlageIconView>::RegisterClass();// ---------------------------------------------------------------------------//		¥ CISDNAnlageIconView(LStream *inStream)// ---------------------------------------------------------------------------//	CISDNAnlageIconView::CISDNAnlageIconView(LStream *inStream) : LView(inStream), LAttachment(msg_AnlageDirty, nil){	mAnlage = CISDNDesktop::GetAnlage(this);	ThrowIfNil_(mAnlage);	mAnlage->AddAttachment(this);}// ---------------------------------------------------------------------------//		¥ ExecuteSelf(MessageT inMessage, void *ioParam)// ---------------------------------------------------------------------------//	Dirty-Message abhšrenvoid		CISDNAnlageIconView::ExecuteSelf(MessageT inMessage, void *ioParam){#pragma unused (inMessage, ioParam)	UpdateIcons();}// ---------------------------------------------------------------------------//		¥ ListenToMessage(MessageT inMessage, void *ioParam)// ---------------------------------------------------------------------------//	auf unsere Panes "hšren"void		CISDNAnlageIconView::ListenToMessage(MessageT inMessage, void *ioParam){#pragma unused (ioParam)	ThrowIfNil_(mAnlage);	switch(inMessage) {	case 'Iste':	// die Anlage wurde angeklickt			mAnlage->AnlageInfoDialog();			break;	case 't/n!':	// Tag/Nachtumschaltung			int		i = mAnlage->GetConfig() + 1;			if(i >= mAnlage->GetConfigCount()) i = 0;			mAnlage->SetConfig(i);			mAnlage->SetDirty();			mAnlage->ExecuteAttachments(msg_AnlageDirty, nil);			break;	default:		// ein Telefon-Icon wurde angeklickt			if(inMessage >= 'AP00' && inMessage < 'AP99')				mAnlage->GeraetInfoDialog(inMessage - 'AP00');			break;	}}// ---------------------------------------------------------------------------//		¥ SetIcon(PaneIDT inId1, PaneIDT inId2, short inTop, short inLeft, LString inTitleStr, SInt16 inIcon, SInt16 inState)// ---------------------------------------------------------------------------//	Icon mit Titel und Rahmen ins ISDN Desktop einsetzen#include <LTextGroupBox.h>#include <LIconControl.h>void	CISDNAnlageIconView::SetIcon(PaneIDT inId1, PaneIDT inId2, short inTop, short inLeft, LString &inTitleStr, SInt16 inIcon, SInt16 inState){	SPaneInfo	thePaneInfo;	// Set up common Pane parameters	thePaneInfo.visible = true;	thePaneInfo.bindings.left = false;	thePaneInfo.bindings.top = false;	thePaneInfo.bindings.right = false;	thePaneInfo.bindings.bottom = false;	thePaneInfo.userCon = 0;	thePaneInfo.superView = this;	// in unseren scrollbaren View einsetzen#if 1	SViewInfo		theViewInfo;	theViewInfo.imageSize.width = 0; theViewInfo.imageSize.height = 0;	theViewInfo.scrollPos.h = 0; theViewInfo.scrollPos.v = 0;	theViewInfo.scrollUnit.h = 1; theViewInfo.scrollUnit.v = 1;	theViewInfo.reconcileOverhang = false;	thePaneInfo.paneID = inId2;	// GroupBox = Titel + Rahmen fŸr unser Icon	thePaneInfo.enabled = true;	thePaneInfo.left = inLeft;	thePaneInfo.top = inTop;	thePaneInfo.width = mIconWidth - 2;	thePaneInfo.height = mIconHeight - 4;	LTextGroupBox	*cap = new LTextGroupBox(thePaneInfo, theViewInfo, true, 131, StringPtr(inTitleStr));	ThrowIfNil_(cap);	cap->FinishCreate();	thePaneInfo.paneID = inId1;	// LCicnButton	thePaneInfo.enabled = true;	thePaneInfo.left = (mIconWidth - 2 - 64) / 2;	thePaneInfo.top = 10 + (mIconHeight - 4 - 64 - 10) / 2;	thePaneInfo.width = 64;	thePaneInfo.height = 64;	thePaneInfo.superView = cap;	// in unseren scrollbaren View einsetzen	CIconButton	*cip = new CIconButton(thePaneInfo, inId1, kUseIconFamily, inIcon, kAlignAbsoluteCenter, inState, 0);	ThrowIfNil_(cip);	if(inState == kTransformDisabled)		cip->Disable();	cip->FinishCreate();	cip->AddListener(this);#else	thePaneInfo.paneID = inId1;	// LCicnButton	thePaneInfo.enabled = true;	thePaneInfo.left = inLeft + (mIconWidth - 2 - 64) / 2;	thePaneInfo.top = inTop + 10 + (mIconHeight - 4 - 64 - 10) / 2;	thePaneInfo.width = 64;	thePaneInfo.height = 64;	CIconButton	*cip = new CIconButton(thePaneInfo, inId1, kUseIconFamily, inIcon, kAlignAbsoluteCenter, inState, 0);	ThrowIfNil_(cip);	if(inState == kTransformDisabled)		cip->Disable();	cip->FinishCreate();	cip->AddListener(this);	thePaneInfo.paneID = inId2;	// GroupBox = Titel + Rahmen fŸr unser Icon	thePaneInfo.enabled = false;	thePaneInfo.left = inLeft;	thePaneInfo.top = inTop;	thePaneInfo.width = mIconWidth - 2;	thePaneInfo.height = mIconHeight - 4;	LGroupBox	*cap = new LGroupBox(thePaneInfo, StringPtr(inTitleStr), 131);	ThrowIfNil_(cap);	cap->FinishCreate();#endif}// ---------------------------------------------------------------------------//		¥ UpdateIcons()// ---------------------------------------------------------------------------//	Desktop an unsere ISDN Anlage anpassenvoid	CISDNAnlageIconView::UpdateIcons(){	// erstmal alle Icons in diesem View lšschen	DeleteAllSubPanes();	// Icon der Telefonanlage nach links oben setzen	LStr255		theName;	ThrowIfNil_(mAnlage);	mAnlage->GetAnlagenName(theName);	SetIcon('Iste', 'Istf', 5, 10, theName, mAnlage->GetAnlagenIcon(), kTransformNone);	int		intAB = mAnlage->GetAB();	int		row = mAnlage->GetAppCount() > 16 ? 10 : (mAnlage->GetAppCount() < 4 ? mAnlage->GetAppCount() : 4);	// analoge Apparate setzen	for(int theIndex=0; theIndex<intAB; theIndex++) {		SInt16	icon;		SInt16	theState = kTransformNone;		if(mAnlage->GetAnlagenHersteller() == Anlage_Emmerich && mAnlage->GetVersion() >= 193 && mAnlage->GetAnlageMessageOnHold() == theIndex + 1) {			icon = 1009;				// Message on hold			theState = kTransformDisabled;		} else {			// passendes Icon ermitteln			icon = mAnlage->GetAppIcon(theIndex);			// ist der Apparat aktiv, d.h. ist ihm mindestens eine Nummer zugeteilt worden?			if(!mAnlage->IsAppActive(theIndex))				theState = kTransformOffline;	// der Apparat ist offline		}		LStr255	theName;		mAnlage->GetAppName(theIndex, theName);		theName += LStr255(1000,29);		theName += SInt32(mAnlage->GetAppNo(theIndex));		SetIcon('AP00' + theIndex, 'AX00' + theIndex, 5 + (theIndex / row) * mIconHeight, 15 + mIconWidth + (theIndex % row) * mIconWidth, theName, icon, theState);	}	// digitale Apparate setzen	int	theAppIndex = mAnlage->GetAB();	for(int theIndex=0; theIndex<mAnlage->GetIntS0(); theIndex++) {		for(int theSubIndex=0; theSubIndex<mAnlage->GetS0App(); theSubIndex++) {			SInt16	theState = kTransformNone;			// ist der Apparat aktiv, d.h. ist ihm mindestens eine Nummer zugeteilt worden?			if(!mAnlage->IsAppActive(theAppIndex))				theState = kTransformOffline;	// der Apparat ist offline			LStr255	theName;			mAnlage->GetAppName(theAppIndex, theName);			theName += LStr255(1000,29);			theName += SInt32(mAnlage->GetAppNo(theAppIndex));			SetIcon('AP00' + theAppIndex, 'AX00' + theAppIndex, 5 + (theIndex + (intAB + row - 1) / row) * mIconHeight, 15 + mIconWidth + theSubIndex * mIconWidth, theName, mAnlage->GetAppIcon(theAppIndex), theState);			theAppIndex++;		}	}	// Tag/Nacht Icon darstellen	if(mAnlage->GetConfigCount() > 1) {		SPaneInfo	thePaneInfo;	// Set up common Pane parameters		thePaneInfo.visible = true;		thePaneInfo.bindings.left = false;		thePaneInfo.bindings.top = false;		thePaneInfo.bindings.right = false;		thePaneInfo.bindings.bottom = false;		thePaneInfo.userCon = 0;		thePaneInfo.superView = this;	// in unseren scrollbaren View einsetzen		thePaneInfo.paneID = 'T/N!';	// LCicnButton		thePaneInfo.enabled = true;		thePaneInfo.left = 30;		thePaneInfo.top = 140;		thePaneInfo.width = 32;		thePaneInfo.height = 32;		CIconButton	*cip = new CIconButton(thePaneInfo, 't/n!', kUseCICN, mAnlage->GetConfig() + 128, kAlignAbsoluteCenter, kTransformNone, 0);		ThrowIfNil_(cip);		cip->FinishCreate();		cip->AddListener(this);	}	// Fenster komplett updaten	Rect	theRect = (*((WindowPeek)GetMacPort())->contRgn)->rgnBBox;	theRect.right = theRect.left + 15 + mIconWidth + 16 + mIconWidth * row;	theRect.bottom = theRect.top +  5 + 15 + mIconHeight * ((intAB + row - 1) / row + mAnlage->GetIntS0());	LWindow	*theWind = LWindow::FetchWindowObject(GetMacPort());	ThrowIfNil_(theWind);	Rect	theMinMaxRect;	theWind->GetMinMaxSize(theMinMaxRect);	theMinMaxRect.right = theRect.right - theRect.left;	theMinMaxRect.bottom = theRect.bottom - theRect.top;	theWind->SetMinMaxSize(theMinMaxRect);	SDimension16	theStdSize;	theStdSize.width = theMinMaxRect.right;	theStdSize.height = theMinMaxRect.bottom;	theWind->SetStandardSize(theStdSize);	ResizeImageTo(theMinMaxRect.right - 16, theMinMaxRect.bottom - 16, false);	theWind->DoSetBounds(theRect);	theWind->Refresh();}