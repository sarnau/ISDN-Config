// ===========================================================================//	CISDNAnlage.h						©1994 Metrowerks Inc. All rights reserved.// ===========================================================================#pragma once#include "SharewareFlags.h"#include "SerialComm.h"#include <LCommander.h>#include <LAttachable.h>const MessageT		msg_AnlageDirty = 'Dirt';typedef enum {	Anlage_Ackermann = 1,	Anlage_Elmeg,	Anlage_Emmerich} AnlagenHersteller;typedef enum {	Endgeraetedienst_Unbekannt = 0,	Endgeraetedienst_Fernsprechen,	Endgeraetedienst_Fax,	Endgeraetedienst_Modem,	Endgeraetedienst_Anrufbeantworter,	Endgeraetedienst_DatexJ,	Endgeraetedienst_Kombi,	Endgeraetedienst_Digital,	Endgeraetedienst_Tuerstelle,	Endgeraetedienst_MusikIn,	Endgeraetedienst_DigitalSammelnummer} Endgeraetedienst;typedef enum {	EB_unbekannt = 0,	EB_keine,	EB_Intern,	EB_Halbamt,	EB_Ort,	EB_Nah,	EB_Inland,	EB_Vollamt} Endgeraeteberechtigung;extern void			DoAbout();class	CISDNAnlage : public LCommander {public://								CISDNAnlage() { };	virtual						~CISDNAnlage() { };	// IC File setzen	virtual void				SetDefault(Boolean iOptionalFlag = false) = 0; 	virtual void				SetISDNData(Handle h) = 0; 	virtual Handle				GetISDNData() = 0; 	virtual void				SetOptData(Handle h) { h; }; 	virtual Handle				GetOptData() { return nil; }; 	virtual void				Auslesen() = 0; 	virtual void				Reset() = 0;#if !DEMO_VERSION 	virtual void				Senden() = 0; 	virtual void				ReadGeb() = 0;#endif	// Informationen über die Anlage#if ELMEG_ONLY	virtual void				About() const { };#else	virtual void				About() const { DoAbout(); };#endif 	virtual void				GetAnlagenName(LStr255 &oAnlageName) const = 0; 	virtual SInt32				GetAnlagenHersteller() const = 0;	virtual SInt16				GetAnlagenIcon() const { return 1000; }; 	virtual SInt32				GetVersion() const = 0;	virtual void				GetVersionStr(LStr255 &oVersionStr) const = 0;	virtual SInt32				GetExtS0() const = 0; 	virtual SInt32				GetIntS0() const = 0; 	virtual SInt32				GetAB() const = 0; 	virtual SInt32				GetAnlageMessageOnHold() const = 0; 	virtual SInt32				GetAnlageProtokoll() const = 0; 	virtual SInt32				GetAppCount() const = 0; 	virtual SInt32				GetS0App() const { return GetAnlageProtokoll() ? 10 : 8; }; 	virtual SInt32				GetAnlagenTyp(SInt16 iAnlage = 1) const = 0; 	virtual SInt32				GetConfigCount() const { return 1; }; 	virtual void				SetConfig(SInt32 iIndex) { iIndex; }; 	virtual SInt32				GetConfig() const { return 0; };	// Informationen über die Apparate 	virtual SInt16				GetAppNo(SInt16 iAppIndex) const = 0; 	virtual void				GetAppName(SInt16 iAppIndex, LStr255 &oAppName) const = 0; 	virtual void				SetAppName(SInt16 iAppIndex, const LStr255 &oAppName) = 0; 	virtual Endgeraetedienst	GetAppDienst(SInt16 iAppIndex) const = 0;	virtual Endgeraeteberechtigung	GetAppBerechtigung(SInt16 iAppIndex) const = 0; 	virtual Boolean				IsAppActive(SInt16 iAppIndex) const = 0;	virtual ResIDT				GetAppIcon(SInt16 theIndex) const;	// Gebühren 	virtual UInt16				GetAppGebCount() const { return 0; } 	virtual UInt16				GetAppGeb(SInt16 iAppIndex) const = 0; 	virtual void				SetAppGeb(SInt16 iAppIndex, UInt16 theGebcount) = 0;	// Kurzwahlen	virtual SInt16				GetKurzwahlCount() const { return 0; };	virtual void				GetKurzwahl(SInt16 iKurzIndex, SInt16 &oAppKurzNo, LStr255 &oAppNummer, LStr255 &oAppName) const { iKurzIndex; oAppNummer; oAppName; oAppKurzNo = 0; };	virtual	void				SetKurzwahl(SInt16 iKurzIndex, const LStr255 oAppNummer, const LStr255 oAppName) { iKurzIndex; oAppNummer; oAppName; };	// Sperrnummern	virtual SInt16				GetSperrnummerCount() const { return 0; };	virtual void				GetSperrnummer(SInt16 iIndex, LStr255 &oNummer) const { iIndex; oNummer; };	virtual void				SetSperrnummer(SInt16 iIndex, const LStr255 &oNummer) { iIndex; oNummer; };	// Freinummern	virtual SInt16				GetFreinummerCount() const { return 0; };	virtual void				GetFreinummer(SInt16 iIndex, LStr255 &oNummer) const { iIndex; oNummer; };	virtual void				SetFreinummer(SInt16 iIndex, const LStr255 &oNummer) { iIndex; oNummer; };	// Passwort ändern	virtual void				ChangePasswort() {};	virtual bool				HasChangePasswort() const { return false; };	// Anrufweiterschaltung	virtual void				Anrufweiterschaltung() {};	virtual bool				HasAnrufweiterschaltung() const { return false; };	// Nahbereichsnummern	virtual SInt16				GetNahbereichsnummerCount() const { return 0; };	virtual void				GetNahbereichsnummer(SInt16 iIndex, LStr255 &oNummer) const { iIndex; oNummer; };	virtual void				SetNahbereichsnummer(SInt16 iIndex, const LStr255 &oNummer) { iIndex; oNummer; };	// Einstellungen dirty?	Boolean						IsDirty() const { return mIsDirty; };	void						SetDirty(Boolean inDirty = true) { mIsDirty = inDirty; };	// globale Dialoge, nunja... 	virtual void				AnlageInfoDialog() = 0; 	virtual void				GeraetInfoDialog(short geraet) = 0;protected:	SerialDriver		*mSd;	void				ErrorAlert(long iErrorCode = 0, short iAlertID = 129);private:	Boolean				mIsDirty;};