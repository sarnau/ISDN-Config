// ===========================================================================//	CGebTable.cp					© 1996, Markus Fritze. All rights reserved.// ===========================================================================#pragma once#include <LWindow.h>#include <LTableView.h>#include <LAttachment.h>#include "CISDNAnlage.h"#include "PPFactory.h"class CISDNAnlage;// ---------------------------------------------------------------------------//		¥ Class CGebTable// ---------------------------------------------------------------------------class	CGebTable :	 public LWindow, public LAttachment {public:	static bool	sRegisterClass;public:	enum { class_ID = 'GeTa' };							CGebTable() : LAttachment(msg_AnlageDirty, nil) {};						CGebTable(SWindowInfo &inWindowInfo) : LWindow(inWindowInfo), LAttachment(msg_AnlageDirty, nil) {};						CGebTable(ResIDT inWINDid, UInt32 inAttributes,								LCommander *inSuperCommander) : LWindow(inWINDid, inAttributes, inSuperCommander), LAttachment(msg_AnlageDirty, nil) {};						CGebTable(LStream *inStream) : LWindow(inStream), LAttachment(msg_AnlageDirty, nil) {};	virtual void		FinishCreateSelf();	virtual Boolean		ObeyCommand(								CommandT			inCommand,								void				*ioParam = nil);	virtual void		FindCommandStatus(								CommandT			inCommand,								Boolean				&outEnabled,								Boolean				&outUsesMark,								UInt16				&outMark,								Str255				outName);protected:	CISDNAnlage			*mAnlage;	virtual void	ExecuteSelf(							MessageT		inMessage,							void			*ioParam);};// ---------------------------------------------------------------------------//		¥ Class CGebTableView// ---------------------------------------------------------------------------class	CGebTableView :	 public LTableView {public:	static bool	sRegisterClass;public:	enum { class_ID = 'GeTV' };							CGebTableView() : LTableView() {};						CGebTableView(const SPaneInfo &inPaneInfo, const SViewInfo &inViewInfo) : LTableView(inPaneInfo, inViewInfo) {};						CGebTableView(LStream *inStream);	virtual Boolean		ClickSelect(								const STableCell		&inCell,								const SMouseDownEvent	&inMouseDown);protected:	CISDNAnlage			*mAnlage;	virtual void		DrawCell(								const STableCell		&inCell,								const Rect				&inLocalRect);};