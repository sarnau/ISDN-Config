// ===========================================================================//	File:					CIconButton.h//  Version:				1.1 - Dec 5, 1994////	Copyright ©1994 Mike Shields. All rights reserved.// ===========================================================================////// CIconButton is a Pane derived class which encapulates the drawing behavior of // the PlotIconID, PlotCIcon, PlotIcon Toolbox calls into a class. The class // handles retriving and disposing of the icon data, you only have to tell it// the type and id of icon to draw. Optionally, you can specify the alignment, // state and label of the icon. (Not available for B&W ICON resource drawing).// To use the PlotIconID drawing style, specify the graphics type as kUseIconFamily// To use the PlotCIcon drawing style, specify the graphics type as kUseCICN// To use the PlotIcon drawing style, specify the graphics type as kUseBWIcon//// Note: For more info on the PlotIconID calls see TN QD 18 - // Drawing Icons the System 7 Way//#pragma once#include <LControl.h>#include "PPFactory.h"// types of icons this pane can draw.const OSType kUseIconFamily = 'ICN#';const OSType kUseCICN = 'cicn';const OSType kUseBWIcon = 'ICON';class CIconButton : public LControl {	public:		static bool	sRegisterClass;	public:		enum { class_ID = 'Cicn' };							CIconButton();						// default constructor							CIconButton(const CIconButton &inOriginal);	// copy costructor							CIconButton(const SPaneInfo &inPaneInfo, MessageT inClickedMessage, OSType inGraphicsType,											ResIDT inIconID, SInt16 inAlignment, 											SInt16 inState, SInt16 inLabel);		// build on the fly							CIconButton(LStream *inStream);			// build from resource		virtual				~CIconButton();									// set/get the type of icon to draw		void				SetGraphicsType(OSType inGraphicsType);		OSType				GetGraphicsType(void) const { return mGraphicsType; };							// set/get the id if the drawn icon		ResIDT 				GetIconID(void) const { return mIconID; };		void				SetIconID(ResIDT inIconID);									// set/get the alignment of the drawn icon in the pane (for 'ICN# only)		SInt16				GetAlignment(void) const { return mAlignment; };		void 				SetAlignment(SInt16 inAlignment) { mAlignment = inAlignment; };									// set/get the state of the drawn icon in the pane (for 'ICN# only)		SInt16				GetIconState(void) const { return mState; };		void 				SetIconState(SInt16 inIconState) { mState = inIconState; };									// set/get the label of the drawn icon in the pane (for 'ICN# only)		SInt16				GetIconLabel(void) const { return mLabel; };		void				SetIconLabel(SInt16 inIconLabel) { mLabel = inIconLabel; };							// get a handle to the icon data (for 'cicn' and 'ICON' types only)		Handle				GetIconHandle() const { return mIconHandle; };	protected:		OSType				mGraphicsType;		ResIDT				mIconID;		SInt16				mAlignment;		SInt16				mState;		SInt16				mLabel;		Handle				mIconHandle;				virtual void		DrawSelf();		virtual void		HotSpotAction(short inHotSpot, Boolean inCurrInside, Boolean inPrevInside);		virtual void		HotSpotResult(short inHotSpot);};