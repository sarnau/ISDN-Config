// ===========================================================================//	CISTEC.h						©1994 Metrowerks Inc. All rights reserved.// ===========================================================================#pragma once#include "CISDNAnlage.h"#include <LWindow.h>#define MAX_CONFIG_COUNT	2#define	ISTEC_ANZ_KW_NR		60class	CISTEC : public CISDNAnlage {public:#if PRAGMA_STRUCT_ALIGN	#pragma options align=mac68k#elif PRAGMA_STRUCT_PACKPUSH	#pragma pack(push, 2)#elif PRAGMA_STRUCT_PACK	#pragma pack(2)#endif	typedef struct {		char	Anschlussart;	// Anschlussart: 0=Mehrgeraete-,1=Anlagenanschluss		char	Anz_abSchnittstellen;	// Anzahl der a/b-Schnittstellen		char	Protokoll;		// Protokoll: 0=1TR6, 1=E-DSS1		char	SWVersionHigh;	// Software Versionsnummer		char	SWVersionLow;		char	TFEZuordnung;	// TFE-Zuordnung (0x15=21,0x16=22,...)		char	MSN[10][5];		// max. 10 MSNs (E-DSS1)		char	MusicOnHold;	// Music on Hold (00=aus,01=ein)		char	Anz_intS0Bus;	// Anzahl der internen S0-Busse		char	Anz_extS0Bus;	// Anzahl der externen S0-Busse		char	Abfragestelle1;	// Abfragestelle1 (0x15=21,0x16=22,...)		char	Abfragestelle2;	// Abfragestelle2 (0x15=21,0x16=22,...)		char	SizeNumber1;		char	Number1[10];	// max. 2 Telefonnummern (1TR6)		char	SizeNumber2;		char	Number2[10];		char	MSNGroup[10];	// MSN Gruppenbildung: Fuer jede der 10 MSN'sein Byte,								// in dem die einzelnen Bits angeben, 								// welche der 8 Nebenstellen klingeln sollen.		char	MessageOnHold;	// Musik Ÿber ein Telefon extern einspeisen (Apparat-Nummer)		char	NationalCode[2];// internationale Vorwahl (0x0031 = 49 fŸr Deutschland, Intel-Format!)		char	TFELocation[4];	// 		char	AlarmTon;		// (momentan keine Bedeutung)		char	SonderRuf[10];	// (0..3) fŸr jede MSN	} GrundKonfigStruct;		// 93/106/116 Bytes lang (inkl. "reserved")	typedef struct {		char	Wahlbewertung;	// Wahlbewertung: 00=keine,01=Inland,...		char	Dienst;			// Dienst: 00=Telefonie,01=G3-FAX,...		char	Rufumleitung;	// Rufumleitung: 00=keine,01=extern,0x15=Nebenstelle 21,0x16=Nebenstelle 22,usw.		char	Gebuehrenimpuls;// Gebuehrenimpuls: 00=nein,01=ja		char	PIN[2];			// PIN (BCD)		char	UmlRufnummer[10];	// Rufnummer fuer externe Rufumleitung (BCD mit $F aufgefŸllt)		char	TerminalMode;	// 0x01 = spontane Amtsholung, 0x00 = aus		char	AnklopfenApp;	// Ein Bit pro Sprechstelle: 1 = Anklopfen erlaubt		char	filler1;		// ???		char	AnklopfenMSN1;	// Ein Bit pro MSN: Anklopfen von MSN x erlaubt		char	AnklopfenMSN2;		char	ZiffLenUml;		// Zusatzinfo Ÿber ZiffernlŠnge der ext. Rufumleitung		char	UmlBesetzt;		// Umleitungsziel bei Besetzt (0 = keine)		char	UmlAnzRufseq;	// Umleitungsziel nach Anzahl Rufsequenzen (0 = keine)		char	AnzRufseq;		// Anzahl Rufe bis Umleitung aktiviert wird	} EndgeraetekonfigStruct;	// 16/20/25 Bytes lang	// unsere eigene Struktur fŸr die Kurzwahlen	typedef struct {		UInt8	RufNr[21];		// Telefonnummer (max. 20 Ziffern, Pascal-String)		Str63	Namen;			// Name (unbenutzt bei der ISTEC, Pascal-String)		char	Babyruf;		// Babyruf (true/false)		char	Tin;			// Bitmaske: fŸr welchen Apparat gilt dieser Eintrag		char	Sonderruf;		// Sonderruf (0 = normal, 1,2,4 = Sonderruf, 3 = kein Ruf)		char	Sperre;			// Rufnummer gesperrt? (0xff = ja, 0x00 = nein)		char	future[30];		// fŸr die Zukunft	} KurzwahlKonfigStruct;#if PRAGMA_STRUCT_ALIGN	#pragma options align=reset#elif PRAGMA_STRUCT_PACKPUSH	#pragma pack(pop)#elif PRAGMA_STRUCT_PACK	#pragma pack()#endifpublic:	typedef enum {		AT_I1003 = 1,		AT_I1008,		AT_I1016,		AT_I1024,		AT_I2016,		AT_I2024,		AT_I2400,		AT_I2416,		AT_I2424	} ISTECAnlagenTyp;						CISTEC();	// IC File setzen	void				SetDefault(Boolean iOptionalFlag = false);	static Boolean		IsISTECData(Handle inH); 	void				SetISDNData(Handle h); 	Handle				GetISDNData();	void				Auslesen();	void				Reset();#if !DEMO_VERSION	void				Senden();	void				ReadGeb();#endif	// Informationen Ÿber die Anlage	void				GetAnlagenName(LStr255 &oAnlageName) const;	SInt32				GetAnlagenHersteller() const { return Anlage_Emmerich; };	SInt32				GetVersion() const { return mISTECVersion; };	void				GetVersionStr(LStr255 &oVersionStr) const;	SInt32				GetExtS0() const { return mK->mKonfig.Anz_extS0Bus; };	SInt32				GetIntS0() const { return mK->mKonfig.Anz_intS0Bus; };	SInt32				GetAB() const { return mK->mKonfig.Anz_abSchnittstellen; };	SInt32				GetAnlageMessageOnHold() const { return mK->mKonfig.MessageOnHold; };	SInt32				GetAnlageProtokoll() const { return mK->mKonfig.Protokoll; };	SInt32				GetAnlageAnschlussart() const { return mK->mKonfig.Anschlussart; };	SInt32				GetAppCount() const { return mK->mKonfig.Anz_intS0Bus * (mK->mKonfig.Protokoll ? 10 : 8) + mK->mKonfig.Anz_abSchnittstellen; };	SInt32				GetAnlagenTyp(SInt16 iAnlage = 1) const { iAnlage; return GetExtS0() * 1000 + GetIntS0() * 100 + GetAB(); };	SInt32				GetConfigCount() const { return GetVersion() < 200 ? 1 : MAX_CONFIG_COUNT; };	void				SetConfig(SInt32 iIndex) { if(GetVersion() < 200) iIndex = 0; mKIndex = iIndex; mK = &mKData[iIndex]; }; 	SInt32				GetConfig() const { return mKIndex; };	// GebŸhren 	UInt16				GetAppGebCount() const { return GetAppCount(); };	UInt16				GetAppGeb(SInt16 iAppIndex) const;	void				SetAppGeb(SInt16 iAppIndex, UInt16 theGebcount);	// Informationen Ÿber die Apparate	Boolean				IsAppActive(SInt16 iAppIndex) const;	SInt16				GetAppNo(SInt16 iAppIndex) const;	void				GetAppName(SInt16 iAppIndex, LStr255 &oAppName) const; 	void				SetAppName(SInt16 iAppIndex, const LStr255 &oAppName);	Endgeraetedienst	GetAppDienst(SInt16 iAppIndex) const;	Endgeraeteberechtigung	GetAppBerechtigung(SInt16 iAppIndex) const;	// globale Dialoge, nunja...	void				AnlageInfoDialog();	void				GeraetInfoDialog(short geraet);public:	typedef struct {		GrundKonfigStruct		mKonfig;		EndgeraetekonfigStruct	mEndg[64];		Str31					mEndgName[64];		UInt16					mGeb[64];		KurzwahlKonfigStruct	mKurz[ISTEC_ANZ_KW_NR];	} ISTECDataStruct;	UInt8				mAlarmApp;	ISTECDataStruct		mKData[MAX_CONFIG_COUNT];	ISTECDataStruct		*mK;	SInt32				mKIndex;	char				mDefaultApp;	UInt16				mISTECVersion;	OSErr				GetCommand(StringPtr cmd, short &len, short maxLen, unsigned short timeout = 30L);	OSErr				SendCommand(StringPtr cmd, short len);	// Subroutine von AnlageInfoDialog()	void				UpdateNummern(int anschluss, int protokoll, LWindow *theDialog);	// BCD in einen String wandeln	void				GetBCD(char *bcdPtr, short bcdSize, LStr255 &outString);	void				SetBCD(char *bcdPtr, short bcdSize, LStr255 inString);	SInt32				GetKonfigSize() { return (GetVersion() <= 192) ? 93 : (GetVersion() < 200) ? 106 : 116; };	SInt32				GetEndgSize() { return (GetVersion() <= 192) ? 16 : (GetVersion() < 200) ? 20 : 25; };	void				SetKonfig(const GrundKonfigStruct *iKonfig) { BlockMoveData(iKonfig, &mK->mKonfig, sizeof(mK->mKonfig)); mISTECVersion = mK->mKonfig.SWVersionHigh * 100 + mK->mKonfig.SWVersionLow; };	// Kurzwahlen	SInt16				GetKurzwahlCount() const { return (GetVersion() < 200) ? 0 : ISTEC_ANZ_KW_NR; };	void				GetKurzwahl(SInt16 iKurzIndex, SInt16 &oAppKurzNo, LStr255 &oAppNummer, LStr255 &oAppName) const;	void				SetKurzwahl(SInt16 iKurzIndex, const LStr255 oAppNummer, const LStr255 oAppName);	char				CheckGoodApp(char inApp, Boolean retNull = false);	void				CheckData();	void				BuildIndexTable();	UInt16				mIndexTab[64];};