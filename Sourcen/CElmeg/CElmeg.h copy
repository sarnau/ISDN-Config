// ===========================================================================//	CElmeg.h						©1994 Metrowerks Inc. All rights reserved.// ===========================================================================#pragma once#include "CISDNAnlage.h"#include "TKTYPESH.H"#define MAX_CONFIG_COUNT	2class	CElmeg : public CISDNAnlage {public:	UInt8				mKonfig[918];	// Konfiguration der Anlage	char				mVersion[32];	// ASCII-Versionsnummer der Anlage	Str31				mEndgName[3];public:	typedef enum {		AT_L0 = 1,		AT_L1,		AT_L2,		AT_C23,		AT_C43	} ElmegAnlagenTyp;						CElmeg();	// IC File setzen	void				SetDefault(Boolean iOptionalFlag = false);	static Boolean		IsElmegData(Handle inH); 	void				SetISDNData(Handle h); 	Handle				GetISDNData();	void				Auslesen();	void				Reset();#if !DEMO_VERSION	void				Senden();	void				ReadGeb() {};#endif	// Informationen über die Anlage	void				GetAnlagenName(LStr255 &oAnlageName) const;	Int32				GetAnlagenHersteller() const { return Anlage_Emmerich; };	SInt16				GetAnlagenIcon() const { return 3000; };	Int32				GetVersion() const;	void				GetVersionStr(LStr255 &oVersionStr) const;	Int32				GetExtS0() const { return 1; };	Int32				GetIntS0() const { return 0; };	Int32				GetAB() const { return 3; };	Int32				GetAppCount() const { return 3; };	Int32				GetAnlageMessageOnHold() const { return 0; };	Int32				GetAnlageProtokoll() const { return 1; };	// E-DSS1	Int32				GetAnlageAnschlussart() const { return mKonfig[0x31] == 2 ? 0 : 1; };	Int32				GetAnlagenTyp(Int16 iAnlage = 1) const { iAnlage; return mKonfig[2] + 1; };	Int32				GetConfigCount() const { return 1; };	void				SetConfig(Int32 iIndex) { iIndex; }; 	Int32				GetConfig() const { return 0; };	// Gebühren 	UInt16				GetAppGebCount() const { return 0; };	UInt16				GetAppGeb(SInt16 iAppIndex) const { iAppIndex; return 0; };	void				SetAppGeb(SInt16 iAppIndex, UInt16 theGebcount) { iAppIndex; theGebcount; };	// Passwort ändern	void				ChangePasswort();	bool				HasChangePasswort() const { return true; };	// Informationen über die Apparate	Boolean				IsAppActive(SInt16 iAppIndex) const;	UInt16				GetAppNo(SInt16 iAppIndex) const;	void				GetAppName(SInt16 iAppIndex, LStr255 &oAppName) const; 	void				SetAppName(SInt16 iAppIndex, const LStr255 &oAppName);	Endgeraetedienst	GetAppDienst(SInt16 iAppIndex) const;	Endgeraeteberechtigung	GetAppBerechtigung(SInt16 iAppIndex) const;	// globale Dialoge, nunja...	void				AnlageInfoDialog();	void				GeraetInfoDialog(short geraet);public:	// Kurzwahlen	SInt16				GetKurzwahlCount() const { return 0; };	void				GetKurzwahl(SInt16 iKurzIndex, SInt16 &oAppKurzNo, LStr255 &oAppNummer, LStr255 &oAppName) const { iKurzIndex; oAppKurzNo; oAppNummer; oAppName; };	void				SetKurzwahl(SInt16 iKurzIndex, const LStr255 oAppNummer, const LStr255 oAppName) { iKurzIndex; oAppNummer; oAppName; };	UInt16				CalcCRC(const UInt8 *ptr, UInt16 nCount);	void				TransmitBlock(const UInt8 *iBlockPtr, UInt16 iBlockSize);	void				ReceiveBlock(UInt8 *oBlockPtr, UInt16 &ioBlockSize);	UInt16				GetAppOffset(SInt16 iAppIndex) const;	char				CheckGoodApp(char inApp, Boolean retNull = false);	void				CheckData();};