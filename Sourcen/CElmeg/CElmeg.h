// ===========================================================================//	CElmeg.h						©1994 Metrowerks Inc. All rights reserved.// ===========================================================================#pragma once#include "CISDNAnlage.h"#define MAX_APP_COUNT		(8 + 3*10)//#pragma align_array_members off//#pragma options align=packedtypedef struct{	SInt8					mAppNo;		// Nummer des Apparates	Endgeraetedienst		mDienst;	// Dienstekennung	Endgeraeteberechtigung	mBer;		// Berechtigung	SInt8					mActive;	// true = Apparat aktiv	SInt8					mAuto;		// automatische Belegung der Leitung? (true/false)	SInt8					mGeb;		// GebŸhren erfassen (true/false)	SInt8					mAVABer;	// Berechtigung fŸr AVA bzw. TFE? (true/false)	SInt8					mTFE;		// TFE Berechtigung (true/false)	SInt8					mKeyPad;	// KeyPad Prozeduren (true/false)	SInt8					mDispNum;	// eingehende Nummer anzeigen? (true/false)	SInt8					mSendNum;	// ausgehende Nummer senden? (true/false)	UInt8					mWahl;		// 0 = IWV, 1 = MFV	UInt8					mRichtung;	// 0 = egal, 1 = ISDN Anschlu§ 1, 2 = ISDN Anschlu§ 2	SInt8					mMSN[2];	// zu sendende MSN (Index auf die Nummer, -1 = Default)	Str31					mName;		// Name des Apparates	UInt8					mFiller[128];} CElmegApp;typedef struct{	SInt8		mAnlage;			// (ElmegAnlagenTyp s.u.)	SInt8		mAmtAnschl;			// Anzahl der S0 €mter minus 1 (0 = 1; 1 = 2)	SInt8		mAnschlussArt[2];	// 0 = MehrgerŠte-, 1 = Anlagenanschlu§	SInt8		mBelegZiffer;		// 0É9 = Ziffer zum Holen des Amtes, -1 = nur *0	SInt8		mAVA;				// Anrufvariante (0 = Tag, 1 = Nacht)	SInt8		mTAVA;				// TFE-Anrufvariante (0 = Tag, 1 = Nacht)	SInt8		mMusic;				// 0 = aus, 1,2 = Melodie, 3 = extern	SInt8		mGebInfo;			// 0 = Keypad, 1 = Funktionsprotokoll, 2 = beides	Str15		mAnl[2];			// Nummer vom Anlagenanschlu§ 1/2	Str15		mMSN[2][10];		// MSN externer Anschlu§ 1/2	SInt8		mApp[2][10][8];		// zugeordnete Apparate (-1 = frei)	SInt8		mAVAMSN[2][10];		// AVA zugeordnet? (true/false)	SInt8		mTFE_Var[2][6];		// TFE => Apparat-Zuordnung (Tag/Nacht, max. 6 Apparate;<0 = Leer)	SInt8		mTFE_Extern[2];		// interne/externe TFE Umleitung? (0 = intern, 1 = extern)	SInt8		mAVA_Var[2][4][6];	// AVA => Apparat-Zuordnung (Tag/Nacht, 4 Varianten, max. 6 Apparate;<0 = Leer)	SInt8		mAVA_Geb[2][4];		// GebŸhrenapparat-Zuordnung fŸr externe Umleitung (Tag/Nacht, 4 Varianten)	SInt8		mAVA_Extern[2][4];	// interne/externe Umleitung? (0 = intern, 1 = extern)	Str31		mTFE_Ext[2];		// externe TFE Umleitung (Tag/Nacht)	Str31		mAVA_Ext[2][4];		// externe Umleitung (Tag/Nacht, 4 Varianten)	Str255		mVersion;			// Versionsstring der Anlage	Str31		mKurz[100];			// Kurzwahlen	Str255		mKurzname[100];		// Namen der Kurzwahlen	Str31		mSperr[10];			// Sperrwerk	Str31		mFrei[30];			// Freiwerk?!?	UInt8		mFiller[128];} CElmegKonfig;//#pragma options align=reset//#pragma align_array_members resetclass	CElmeg : public CISDNAnlage {public:	CElmegApp			mApp[MAX_APP_COUNT];	CElmegKonfig		mKonfig;	int					mTimeout;	bool				IsAppDigital(int app) const { return app >= 8; };public:	typedef enum {		ELMEG_C68 = 1,		ELMEG_C88	} ElmegAnlagenTyp;						CElmeg();	// IC File setzen	void				SetDefault(Boolean iOptionalFlag = false);	static Boolean		IsElmegData(Handle inH); 	void				SetISDNData(Handle h); 	Handle				GetISDNData();	void				Auslesen();	void				Reset();#if !DEMO_VERSION	void				Senden();	void				ReadGeb() {};#endif	// Informationen Ÿber die Anlage	static void			DoAbout();	void				About() const { DoAbout(); };	void				GetAnlagenName(LStr255 &oAnlageName) const;	Int32				GetAnlagenHersteller() const { return Anlage_Elmeg; };	SInt16				GetAnlagenIcon() const { return 3000; };	Int32				GetVersion() const { return (mKonfig.mVersion[24] - '0') << 8; };	void				GetVersionStr(LStr255 &oVersionStr) const;	void				GetVersionDateStr(LStr255 &oVersionStr) const;	Int32				GetExtS0() const { return 1 + mKonfig.mAmtAnschl; };	Int32				GetIntS0() const { return mKonfig.mAnlage == ELMEG_C68 ? 2 : (3 - mKonfig.mAmtAnschl); };	Int32				GetAB() const { return 8; };	Int32				GetAppCount() const { return GetAB() + GetIntS0() * 10; }; 	Int32				GetS0App() const { return 10; };	Int32				GetAnlageMessageOnHold() const { return 0; };	Int32				GetAnlageProtokoll() const { return 1; };	// E-DSS1	Int32				GetAnlageAnschlussart() const { return mKonfig.mAnschlussArt[0]; };	Int32				GetAnlagenTyp(Int16 iAnlage = 1) const { iAnlage; return mKonfig.mAnlage; };	Int32				GetConfigCount() const { return 1; };	void				SetConfig(Int32 iIndex) { iIndex; }; 	Int32				GetConfig() const { return 0; };	// GebŸhren 	UInt16				GetAppGebCount() const { return 0; };	UInt16				GetAppGeb(SInt16 iAppIndex) const { iAppIndex; return 0; };	void				SetAppGeb(SInt16 iAppIndex, UInt16 theGebcount) { iAppIndex; theGebcount; };	// Passwort Šndern	void				ChangePasswort();	bool				HasChangePasswort() const { return true; };	// Anrufweiterschaltung	virtual void		Anrufweiterschaltung();	virtual bool		HasAnrufweiterschaltung() const { return true; };	// Informationen Ÿber die Apparate	Boolean				IsAppActive(SInt16 iAppIndex) const { return mApp[iAppIndex].mActive; };	SInt16				GetAppNo(SInt16 iAppIndex) const { return mApp[iAppIndex].mAppNo; };	void				GetAppName(SInt16 iAppIndex, LStr255 &oAppName) const { oAppName = mApp[iAppIndex].mName; }; 	void				SetAppName(SInt16 iAppIndex, const LStr255 &oAppName);	Endgeraetedienst	GetAppDienst(SInt16 iAppIndex) const { return mApp[iAppIndex].mDienst; };	Endgeraeteberechtigung	GetAppBerechtigung(SInt16 iAppIndex) const { return mApp[iAppIndex].mBer; };	// globale Dialoge, nunja...	void				AnlageInfoDialog();	void				GeraetInfoDialog(short geraet);public:	// Kurzwahlen	SInt16				GetKurzwahlCount() const { return 100; };	void				GetKurzwahl(SInt16 iKurzIndex, SInt16 &oAppKurzNo, LStr255 &oAppNummer, LStr255 &oAppName) const;	void				SetKurzwahl(SInt16 iKurzIndex, const LStr255 oAppNummer, const LStr255 oAppName);	// Sperrnummern	SInt16				GetSperrnummerCount() const { return GetVersion() < 0x300 ? 0 : 10; };	void				GetSperrnummer(SInt16 iIndex, LStr255 &oNummer) const;	void				SetSperrnummer(SInt16 iIndex, const LStr255 &oNummer);	// Freinummern	SInt16				GetFreinummerCount() const { return GetVersion() < 0x300 ? 0 : 30; };	void				GetFreinummer(SInt16 iIndex, LStr255 &oNummer) const;	void				SetFreinummer(SInt16 iIndex, const LStr255 &oNummer);	char				CheckGoodApp(char inApp, Boolean retNull = false);	void				CheckData();protected:	void				EditAnlagenSubsettings(int bus, bool isMG);	void				SendLine(const char *iString);	void				SendData(const char *fmt, ...);	int					GetData(char *str);	int					SendCmd(const char *fmt, ...);	int					Send(char *result, const char *fmt, ...);	void				Prepare(char *oVersion, bool inDoSetProg = true);	void				Finish();};