#include "SharewareFlags.h"#if INCLUDE_EURACOM#include "CEuracom.h"#include <UModalDialogs.h>#include <LStdControl.h>#include <LCaption.h>#include <LEditField.h>#include <PP_Messages.h>#include <UMemoryMgr.h>// ---------------------------------------------------------------------------//		¥ Anlangeinformationen// ---------------------------------------------------------------------------void		CEuracom::EditAppNo(LWindow *theDialog, MessageT hitMessage){	LStr255		s;	SInt32		theAnlage = (hitMessage - 'Ps11') >> 8;	// 0 oder 1	SInt32		thePort = (hitMessage - 'Ps11') & 0x0F;	// 0..2	SInt32		thePortDir;	IsdnPort	*theIsdnPort;	if(thePort < 3) {		theIsdnPort = &mAnlage.S0[theAnlage].Port[thePort];		LStdPopupMenu	*thePopup = (LStdPopupMenu*) theDialog->FindPaneByID(hitMessage - 'Ps11' + 'Po11');		SignalIfNot_(thePopup);		thePortDir = thePopup->GetValue() - 1;	} else {		thePortDir = 4;	}	StDialogHandler	theSubHandler(2100 + thePortDir, this);	LWindow		*theSubDialog = theSubHandler.GetDialog();	switch(thePortDir) {	case 1:	// intern		// Port 0 darf nie intern sein!		if(thePort < 1 || thePort > 2) break;		for(int i=0; i<10; i++) {			LEditField *editNumber = (LEditField*) theSubDialog->FindPaneByID('Tel0' + i);			s.Assign(mAnlage.RufNr[theAnlage].Rufnummer[10 + (thePort - 1) * 10 + i]);			editNumber->SetDescriptor(s);			if(i != 0) continue;			editNumber->SelectAll();			theSubDialog->SetLatentSub(editNumber);		}		theSubDialog->Show();		while (true) {					// Let DialogHandler process events			MessageT	hitMessage = theSubHandler.DoDialog();			if (hitMessage == msg_Cancel) {				break;			} else if(hitMessage == msg_OK) {				for(int i=0; i<10; i++) {					LEditField *editNumber = (LEditField*) theSubDialog->FindPaneByID('Tel0' + i);					editNumber->GetDescriptor(s);					char	*theDestStr = mAnlage.RufNr[theAnlage].Rufnummer[10 + (thePort - 1) * 10 + i];					LStr255	theTempStr(theDestStr);					if(theTempStr == s) continue;					LString::CopyPStr(s, StringPtr(theDestStr));					PtoCstr(StringPtr(theDestStr));				}				break;			}		}		break;	case 2:	// extern		LStdPopupMenu	*theAnschlussPopup = (LStdPopupMenu*) theSubDialog->FindPaneByID('Ansc');		SignalIfNot_(theAnschlussPopup);		LView	*theAnschView = (LView*) theSubDialog->FindPaneByID('AnVi');		SignalIfNot_(theAnschView);		LView	*theMgView = (LView*) theSubDialog->FindPaneByID('MgVi');		SignalIfNot_(theMgView);		Boolean		isEDSS1 = (theIsdnPort->PortTyp & TLN_PROTOKOLL_FILTER) == TLN_PROTOKOLL_EDSS1;		if(isEDSS1) {			theAnschlussPopup->SetValue(1);			theMgView->Show();			theAnschView->Hide();		} else {			theAnschlussPopup->SetValue(2);			theAnschView->Show();			theMgView->Hide();		}		LEditField	*theAnschlussNr = (LEditField*) theSubDialog->FindPaneByID('AnNr');		SignalIfNot_(theAnschlussNr);		theAnschlussNr->SetDescriptor(LStr255(theIsdnPort->Anlagenrufnummer, LString::CStringLength(theIsdnPort->Anlagenrufnummer)));		for(SInt32 i=0; i<MSN_MAX_ANZ; i++) {			LEditField	*editNumber = (LEditField*) theSubDialog->FindPaneByID('MSN0' + i);			SignalIfNot_(editNumber);			editNumber->SetDescriptor(LStr255(theIsdnPort->MsnBlock[i], LString::CStringLength(theIsdnPort->MsnBlock[i])));		}		theSubDialog->Show();		while (true) {					// Let DialogHandler process events			MessageT	hitMessage = theSubHandler.DoDialog();			if(hitMessage == 'Ansc') {				if(theAnschlussPopup->GetValue() == 1) {					theMgView->Show();					theAnschView->Hide();				} else {					theAnschView->Show();					theMgView->Hide();				}			} else if(hitMessage == msg_Cancel) {				break;			} else if(hitMessage == msg_OK) {				if(theAnschlussPopup->GetValue() != (isEDSS1 ? 1 : 2)) {					theIsdnPort->PortTyp &= ~TLN_PROTOKOLL_FILTER;					if(theAnschlussPopup->GetValue() == 1)						theIsdnPort->PortTyp |= TLN_PROTOKOLL_EDSS1;				}				theAnschlussNr->GetDescriptor(s);				if(s != LStr255(theIsdnPort->Anlagenrufnummer, LString::CStringLength(theIsdnPort->Anlagenrufnummer))) {						LString::CopyPStr(s, StringPtr(theIsdnPort->Anlagenrufnummer));						PtoCstr(StringPtr(theIsdnPort->Anlagenrufnummer));				}				for(SInt32 i=0; i<MSN_MAX_ANZ; i++) {					LEditField *editNumber = (LEditField*) theSubDialog->FindPaneByID('MSN0' + i);					editNumber->GetDescriptor(s);					if(s != LStr255(theIsdnPort->MsnBlock[i], LString::CStringLength(theIsdnPort->MsnBlock[i]))) {						LString::CopyPStr(s, StringPtr(theIsdnPort->MsnBlock[i]));						PtoCstr(StringPtr(theIsdnPort->MsnBlock[i]));					}				}				break;			}		}		break;	case 4:	// analog		for(int i=0; i<10; i++) {			LEditField *editNumber = (LEditField*) theSubDialog->FindPaneByID('Tel0' + i);			s.Assign(mAnlage.RufNr[theAnlage].Rufnummer[i]);			editNumber->SetDescriptor(s);			if(i != 0) continue;			editNumber->SelectAll();			theSubDialog->SetLatentSub(editNumber);		}		theSubDialog->Show();		while (true) {					// Let DialogHandler process events			MessageT	hitMessage = theSubHandler.DoDialog();			if (hitMessage == msg_Cancel) {				break;			} else if(hitMessage == msg_OK) {				for(int i=0; i<10; i++) {					LEditField *editNumber = (LEditField*) theSubDialog->FindPaneByID('Tel0' + i);					editNumber->GetDescriptor(s);					char	*theDestStr = mAnlage.RufNr[theAnlage].Rufnummer[i];					LStr255	theTempStr(theDestStr);					if(theTempStr == s) continue;					LString::CopyPStr(s, StringPtr(theDestStr));					PtoCstr(StringPtr(theDestStr));				}				break;			}		}		break;	}}void		CEuracom::AnlageInfoDialog(){	StDialogHandler	theHandler(2000, this);	LWindow			*theDialog = theHandler.GetDialog();	LStr255			s;	EinrichtKonfig	theBackupAnlage = mAnlage;	// Konfiguration der Anlage fŸr Cancel!!!	// Anlagenart setzen	LStdPopupMenu	*theAAPopup = (LStdPopupMenu*) theDialog->FindPaneByID('AArt');	SignalIfNot_(theAAPopup);	LEditField		*theHauptAnlNumber = (LEditField*) theDialog->FindPaneByID('HNur');	SignalIfNot_(theHauptAnlNumber);	LCaption		*theHauptAnlStr = (LCaption*) theDialog->FindPaneByID('HNuC');	SignalIfNot_(theHauptAnlStr);	s.Assign(mAnlage.RufNr[0].HauptAnl);	theHauptAnlNumber->SetDescriptor(s);	SInt32	theAnlagenArt = 0;	switch(mAnlage.RufNr[0].HauptAnlNahFern) {	case ANL_TYP_ANL:		theAnlagenArt = 1; break;	case ANL_TYP_UNT_NAH:	theAnlagenArt = 2; break;	case ANL_TYP_UNT_FERN:	theAnlagenArt = 3; break;	case ANL_TYP_A_VERN:	case ANL_TYP_B_VERN:							theAnlagenArt = 4; break;	}	theAAPopup->SetValue(theAnlagenArt);	SInt32		theLastAnlagenArtVal = -1;	Boolean		UpdateAnlagenArt = true;	Boolean		UpdatePortsAnlage1 = true;	Boolean		UpdatePortsAnlage2 = true;	for(SInt32 i=0; i<=((GetAnlagenTyp(2) > 0) ? 1 : 0); i++) {	// und fŸr alle Ports dieser Anlagen		LStdPopupMenu	*theAnlPopup = (LStdPopupMenu*) theDialog->FindPaneByID('PTy1' + i);		SignalIfNot_(theAnlPopup);		theAnlPopup->SetValue(GetAnlagenTyp(i + 1));	}	// sonstige Anlageneinstellungen setzen	LEditField *VorwNumber = (LEditField*) theDialog->FindPaneByID('Vorw');	SignalIfNot_(VorwNumber);	LStr255		theLandStr(GetLandesKennung());	VorwNumber->SetDescriptor(theLandStr);	LStdPopupMenu	*theLandPopup = (LStdPopupMenu*) theDialog->FindPaneByID('VorM');	SignalIfNot_(theLandPopup);	LEditField *OrtsNumber = (LEditField*) theDialog->FindPaneByID('OVor');	SignalIfNot_(OrtsNumber);	LStr255		theOrtStr("\p0" + LStr255(GetOrtsKennung()));	OrtsNumber->SetDescriptor(theOrtStr);	LStdPopupMenu	*theOrtPopup = (LStdPopupMenu*) theDialog->FindPaneByID('OrtM');	SignalIfNot_(theOrtPopup);	LEditField *CodeNumber = (LEditField*) theDialog->FindPaneByID('Code');	SignalIfNot_(CodeNumber);	CodeNumber->SetDescriptor(LStr255(GetCodeNummer()));	LEditField *HotlineNumber = (LEditField*) theDialog->FindPaneByID('Hotl');	SignalIfNot_(HotlineNumber);	HotlineNumber->SetDescriptor(GetHotline());	LStdPopupMenu	*spop3 = (LStdPopupMenu*) theDialog->FindPaneByID('Musi');	SignalIfNot_(spop3);	spop3->SetValue(GetAnlageMessageOnHold() + 1);	LStdCheckBox *AutoAmtBox = (LStdCheckBox*) theDialog->FindPaneByID('AAmt');	SignalIfNot_(AutoAmtBox);	AutoAmtBox->SetValue(mAnlage.TInRufVert[0].AutoAmtGlob);	LStdCheckBox *RufWeiterBox = (LStdCheckBox*) theDialog->FindPaneByID('RufW');	SignalIfNot_(RufWeiterBox);	RufWeiterBox->SetValue((mAnlage.AnlDat.AmtAmtWeitergabe & 0x01) == 0x01);	LStdCheckBox *LM98_99Box = (LStdCheckBox*) theDialog->FindPaneByID('LMMe');	SignalIfNot_(LM98_99Box);	LM98_99Box->SetValue((mAnlage.AnlDat.AmtAmtWeitergabe & 0x02) == 0x02);	// Vorwahl selektieren	VorwNumber->SelectAll();	theDialog->SetLatentSub(VorwNumber);	Boolean		isShown = false;	while(true) {		// nicht vernetzt? D.h. rechte Anlage wegschalten		if(UpdateAnlagenArt) {			LView	*theAnlage2Pane = (LView*) theDialog->FindPaneByID('Anl2');			SignalIfNot_(theAnlage2Pane);			if(GetAnlagenTyp(2) == 0)				theAnlage2Pane->Disable();			else				theAnlage2Pane->Enable();			switch(mAnlage.RufNr[0].HauptAnlNahFern) {			case ANL_TYP_A_VERN:			case ANL_TYP_B_VERN:				UpdatePortsAnlage2 = true;				for(SInt32 k=0; k<=mAnlage.S0[1].AnzPort; k++) {		// und fŸr alle Ports dieser Anlagen					LStdPopupMenu	*thePopup = (LStdPopupMenu*) theDialog->FindPaneByID('Po21' + k);					SignalIfNot_(thePopup);					LStdButton		*thePopupButton = (LStdButton*) theDialog->FindPaneByID('Ps21' + k);					SignalIfNot_(thePopupButton);					thePopup->Enable();					SInt32	thePortDir = (mAnlage.S0[1].Port[k].PortTyp & PORT_DIRECTION_FILTER) >> 6;					if(thePortDir == 0) {						mAnlage.S0[1].Port[k].PortTyp &= ~PORT_DIRECTION_FILTER;						mAnlage.S0[1].Port[k].PortTyp |= (k == 0) ? PORT_DIRECTION_QUER : PORT_DIRECTION_INTERN;					}					if(thePortDir == 3)	thePopupButton->Disable();					else				thePopupButton->Enable();					thePopup->SetValue(thePortDir + 1);				}			case ANL_TYP_ANL:			case ANL_TYP_UNT_NAH:				theHauptAnlNumber->Disable();				theHauptAnlStr->Disable();				break;			case ANL_TYP_UNT_FERN:				theHauptAnlNumber->Enable();				theHauptAnlStr->Enable();				break;			}			UpdateAnlagenArt = false;		}		if(UpdatePortsAnlage1 | UpdatePortsAnlage2) {			SInt32	theAnlCount = (GetAnlagenTyp(2) > 0) ? 1 : 0;			for(SInt32 i=0; i<=theAnlCount; i++) {	// und fŸr alle Ports dieser Anlagen				if(i == 0 && !UpdatePortsAnlage1) continue;				if(i == 1 && !UpdatePortsAnlage2) continue;				for(SInt32 k=0; k<=2; k++) {		// und fŸr alle Ports dieser Anlagen					LStdPopupMenu	*thePopup = (LStdPopupMenu*) theDialog->FindPaneByID('Po11' + k + (i << 8));					SignalIfNot_(thePopup);					LStdButton		*thePopupButton = (LStdButton*) theDialog->FindPaneByID('Ps11' + k + (i << 8));					SignalIfNot_(thePopupButton);					if(mAnlage.S0[i].AnzPort < k) {						thePopup->Disable();						thePopupButton->Disable();					} else {						thePopup->Enable();						thePopupButton->Enable();					}					SInt32	thePortDir = (mAnlage.S0[i].Port[k].PortTyp & PORT_DIRECTION_FILTER) >> 6;					if(thePortDir == 0 || thePortDir == 3) thePopupButton->Disable();					if(GetAnlagenTyp(2) == 0) {	// eine nicht vernetzte Anlage?						::DisableItem(thePopup->GetMacMenuH(), 4);	// dann "Vernetzt" MenŸpunkt sperren						if(thePortDir == 3) thePortDir = 0;			// und diesen Anschlu§ auf "unbenutzt legen"					}					thePopup->SetValue(thePortDir + 1);				}			}			UpdatePortsAnlage1 = false;			UpdatePortsAnlage2 = false;		}		// diese lŠngere Routine sucht in den PopupmenŸs nach einer passenden Vorwahl		// und wŠhlt entsprechend den richtigen MenŸpunkt		for(SInt32 theJIndex=0; theJIndex<2; theJIndex++) {			LStdPopupMenu	*thePopup;			LEditField		*theEditField;			switch(theJIndex) {			case 0:				thePopup = theLandPopup;				theEditField = VorwNumber;				break;			case 1:				thePopup = theOrtPopup;				theEditField = OrtsNumber;				break;			}			theEditField->GetDescriptor(s);			LStr255	theTempStr;			::GetMenuItemText(thePopup->GetMacMenuH(), thePopup->GetValue(), theTempStr);			UInt8	theStartPos = theTempStr.Find('(');			UInt8	theEndPos = theTempStr.Find(')');			if(theStartPos == 0 || s != theTempStr(theStartPos + 1, theEndPos - theStartPos - 1)) {				Boolean	theFoundFlag = false;				for(SInt32 theIndex=1; theIndex<9999; theIndex++) {					if(theIndex == 1) ::DisableItem(thePopup->GetMacMenuH(), 1);					LStr255	theItemStr = "\p";					::GetMenuItemText(thePopup->GetMacMenuH(), theIndex, theItemStr);					if(theItemStr.Length() == 0) break;		// Ende der Liste					UInt8	theStartPos = theItemStr.Find('(');					UInt8	theEndPos = theItemStr.Find(')');					if(s != theItemStr(theStartPos + 1, theEndPos - theStartPos - 1))						continue;					thePopup->SetValue(theIndex);					theFoundFlag = true;					break;				}				if(!theFoundFlag)					thePopup->SetValue(1);	// auf unbekannt setzen			}		}		if(!isShown) {			theDialog->Show();			isShown = true;		}		// Events abarbeiten		MessageT	hitMessage = theHandler.DoDialog();		if(hitMessage == 'AArt') {			switch(theAAPopup->GetValue()) {			case 1:	mAnlage.RufNr[0].HauptAnlNahFern = ANL_TYP_ANL;					break;			case 2:	mAnlage.RufNr[0].HauptAnlNahFern = ANL_TYP_UNT_NAH;					break;			case 3:	mAnlage.RufNr[0].HauptAnlNahFern = ANL_TYP_UNT_FERN;					break;			case 4:	mAnlage.RufNr[0].HauptAnlNahFern = ANL_TYP_A_VERN;					mAnlage.RufNr[1].HauptAnlNahFern = ANL_TYP_B_VERN;					break;			}			ExecuteAttachments(msg_AnlageDirty, nil);			UpdateAnlagenArt = true;		} else if(hitMessage == 'PTy1' || hitMessage == 'PTy2') {			SInt16			theAnlage = hitMessage - 'PTy1';			LStdPopupMenu	*theAnlPopup = (LStdPopupMenu*) theDialog->FindPaneByID(hitMessage);			SignalIfNot_(theAnlPopup);					mAnlage.S0[theAnlage].AnzPort = theAnlPopup->GetValue() - 1;			ExecuteAttachments(msg_AnlageDirty, nil);			if(theAnlage == 0)				UpdatePortsAnlage1 = true;			else				UpdatePortsAnlage2 = true;		} else if(hitMessage == 'VorM' || hitMessage == 'OrtM') {			LStdPopupMenu	*thePopup;			LEditField		*theEditField;			if(hitMessage == 'VorM') {				thePopup = theLandPopup;				theEditField = VorwNumber;			} else {				thePopup = theOrtPopup;				theEditField = OrtsNumber;			}			LStr255	theItemStr;			::GetMenuItemText(thePopup->GetMacMenuH(), thePopup->GetValue(), theItemStr);			UInt8	theStartPos = theItemStr.Find('(');			if(theStartPos > 0) {				UInt8	theEndPos = theItemStr.Find(')');				theEditField->SetDescriptor(theItemStr(theStartPos + 1, theEndPos - theStartPos - 1));				LCommander::SwitchTarget(theEditField);	// Cursor ins Feld setzen				theEditField->SelectAll();				// und alles selektieren			}		} else if(hitMessage >= 'Po11' && hitMessage <= 'Po23') {			LStdPopupMenu	*thePopup = (LStdPopupMenu*) theDialog->FindPaneByID(hitMessage);			SignalIfNot_(thePopup);			LStdButton		*thePopupButton = (LStdButton*) theDialog->FindPaneByID(hitMessage - 'Po11' + 'Ps11');			SignalIfNot_(thePopupButton);			UInt8		thePortDir = 0x00;			switch(thePopup->GetValue()) {			case 1:	// unbenutzt					thePopupButton->Disable();					break;			case 2:	// intern					thePopupButton->Enable();					thePortDir = PORT_DIRECTION_INTERN;					break;			case 3:	// extern					thePopupButton->Enable();					thePortDir = PORT_DIRECTION_EXTERN;					break;			case 4:	// vernetzt					thePopupButton->Disable();					thePortDir = PORT_DIRECTION_QUER;					break;			}			SInt32	theAnlage = (hitMessage - 'Po11') >> 8;	// 0 oder 1			SInt32	thePort = (hitMessage - 'Po11') & 0x0F;	// 0..2			mAnlage.S0[theAnlage].Port[thePort].PortTyp &= ~PORT_DIRECTION_FILTER;			mAnlage.S0[theAnlage].Port[thePort].PortTyp |= thePortDir;			ExecuteAttachments(msg_AnlageDirty, nil);		} else if(hitMessage >= 'Ps11' && hitMessage <= 'Ps24') {			EditAppNo(theDialog, hitMessage);		} else if(hitMessage == msg_Cancel) {			mAnlage = theBackupAnlage;		// Backup restaurieren			break;		} else if(hitMessage == msg_OK) {			theHauptAnlNumber->GetDescriptor(s);			if(s != LStr255((char*)mAnlage.RufNr[0].HauptAnl)) {				LStr2CStr(s, mAnlage.RufNr[0].HauptAnl);			}			if(GetAnlageMessageOnHold() != spop3->GetValue() - 1) {				SetAnlageMessageOnHold(spop3->GetValue() - 1);			}			if(mAnlage.TInRufVert[0].AutoAmtGlob != AutoAmtBox->GetValue()) {				mAnlage.TInRufVert[1].AutoAmtGlob = mAnlage.TInRufVert[0].AutoAmtGlob = AutoAmtBox->GetValue();			}			if(((mAnlage.AnlDat.AmtAmtWeitergabe & 0x01) == 0x01) != RufWeiterBox->GetValue()) {				mAnlage.AnlDat.AmtAmtWeitergabe &= ~0x01;				mAnlage.AnlDat.AmtAmtWeitergabe |= RufWeiterBox->GetValue() ? 1 : 0;			}			if(((mAnlage.AnlDat.AmtAmtWeitergabe & 0x02) == 0x02) != LM98_99Box->GetValue()) {				mAnlage.AnlDat.AmtAmtWeitergabe &= ~0x02;				mAnlage.AnlDat.AmtAmtWeitergabe |= LM98_99Box->GetValue() ? 2 : 0;			}			VorwNumber->GetDescriptor(s);			SInt32		newVorw = SInt32(s);			if(GetLandesKennung() != newVorw) SetLandesKennung(newVorw);			OrtsNumber->GetDescriptor(s);			SInt32		newOrt = SInt32(s);			if(GetOrtsKennung() != newOrt) SetOrtsKennung(newOrt);			CodeNumber->GetDescriptor(s);			SInt32		newCode = SInt32(s);			if(GetCodeNummer() != newCode) SetCodeNummer(newCode);			HotlineNumber->GetDescriptor(s);			if(GetHotline() != s) SetHotline(s);			if(BlockCompare(&mAnlage, &theBackupAnlage, sizeof(mAnlage), sizeof(theBackupAnlage)))				SetDirty();			break;		}	}	CheckData();}#endif