#include "SharewareFlags.h"#if INCLUDE_EURACOM#include "CEuracom.h"#include <UModalDialogs.h>#include <LStdControl.h>#include <LEditField.h>#include <PP_Messages.h>// ---------------------------------------------------------------------------//		¥ EndgerŠteinformationen// ---------------------------------------------------------------------------void		CEuracom::GeraetInfoDialog(short iAppIndex){	StDialogHandler	theHandler(2500, this);	LWindow		*theDialog = theHandler.GetDialog();	SignalIfNot_(theDialog);	// aktuelles Dienstmerkmal in den Fenstertitel einsetzen	Endgeraetedienst	theDienst = GetAppDienst(iAppIndex);	SInt16	theResIndex = 1;	switch(theDienst) {	case Endgeraetedienst_Tuerstelle: theResIndex = 2; break;	case Endgeraetedienst_DigitalSammelnummer: theResIndex = 3; break;	case Endgeraetedienst_Digital: theResIndex = 4; break;	}	LStr255	theTitelStr(500, theResIndex);	theTitelStr += "\p #";	theTitelStr += LStr255(SInt32(GetAppNo(iAppIndex)));	theDialog->SetDescriptor(theTitelStr);	// unsere Felder in der Dialogbox	LStdPopupMenu	*spop1 = (LStdPopupMenu*)theDialog->FindPaneByID('Wahl');	SignalIfNot_(spop1);	LStdPopupMenu	*spop2 = (LStdPopupMenu*)theDialog->FindPaneByID('Dien');	SignalIfNot_(spop2);	LStdCheckBox	*schk1 = (LStdCheckBox*)theDialog->FindPaneByID('Mast');	SignalIfNot_(schk1);	LStdCheckBox	*schk2 = (LStdCheckBox*)theDialog->FindPaneByID('Aufs');	SignalIfNot_(schk2);	LStdCheckBox	*schk3 = (LStdCheckBox*)theDialog->FindPaneByID('AufS');	SignalIfNot_(schk3);	LStdCheckBox	*schk4 = (LStdCheckBox*)theDialog->FindPaneByID('GebI');	SignalIfNot_(schk4);	schk1->SetValue(GetMasterberechtigung(iAppIndex));	schk2->SetValue(GetAufschalterlaubnis(iAppIndex));	schk3->SetValue(GetAufschaltsperre(iAppIndex));	schk4->Disable();	// Amtsberechtigung	SInt16	theAppBerecht;	switch(GetAppBerechtigung(iAppIndex)) {	default:	case EB_keine:		theAppBerecht = 1; break;	case EB_Halbamt:	theAppBerecht = 2; break;	case EB_Ort:		theAppBerecht = 3; break;	case EB_Nah:		theAppBerecht = 4; break;	case EB_Inland:		theAppBerecht = 5; break;	case EB_Vollamt:	theAppBerecht = 6; break;	}	spop1->SetValue(theAppBerecht);	// Dienstekennung	if(theDienst != Endgeraetedienst_Digital && theDienst != Endgeraetedienst_DigitalSammelnummer) {		SInt16	theAppDienst;		switch(theDienst) {		default:		case Endgeraetedienst_Fernsprechen:		theAppDienst = 1; break;		case Endgeraetedienst_Anrufbeantworter:	theAppDienst = 2; break;		case Endgeraetedienst_Fax:				theAppDienst = 3; break;		case Endgeraetedienst_Modem:			theAppDienst = 4; break;		case Endgeraetedienst_Kombi:			theAppDienst = 5; break;		case Endgeraetedienst_Tuerstelle:		theAppDienst = 6; break;		}		spop2->SetValue(theAppDienst);		// nur ab-Apparat mit Index 0 kann TŸrstelle spielen!		SInt16	theAnlage;		SInt16	theAnlIndex;		IndexToApp(iAppIndex, theAnlage, theAnlIndex);		if(theAnlIndex != 0) {			MenuRef		mref = spop2->GetMacMenuH();			SignalIfNot_(mref);			::DisableItem(mref, 6);		}		// bei den fixen TŸrstellen kann man nix einstellen!		if(theAnlIndex == 8 || theAnlIndex == 9) {			spop2->SetValue(6);			spop2->Disable();		}	} else {		spop2->SetValue(1);		spop2->Disable();	}	// nun den Dialog abarbeiten:	theDialog->Show();	while(true) {		MessageT	hitMessage = theHandler.DoDialog();		if(hitMessage == msg_Cancel) {			break;		} else if(hitMessage == msg_OK) {//			ExecuteAttachments(msg_AnlageDirty, nil);			break;		}	}	CheckData();}#endif