// ===========================================================================//	CEuracom.h						©1994 Metrowerks Inc. All rights reserved.// ===========================================================================#pragma once#include "CISDNAnlage.h"#include "Euracom.h"#include "MRFUtilities.h"#include <LWindow.h>typedef enum {	AT_I180 = 1,	AT_I181,	AT_I182} EuracomAnlagenTyp;class	CEuracom : public CISDNAnlage {	UInt16				mSWVersion;				// Software Versionsnummer	LStr255				mVersion;				// Versionsstring	EinrichtKonfig		mAnlage;				// Konfiguration der Anlage	UInt16				mGeb[2][MAX_RUF_VAR_LEN];	// Gebühren	KurzwahlKonfig		mKurz;					// Kurzwahlliste	Int32				GetLandesKennung() const { return Int32(LStr255((char*)mAnlage.AnlDat.Landeskennung)); };	void				SetLandesKennung(Int32 iLand) { LStr2CStr(LStr255(iLand), mAnlage.AnlDat.Landeskennung); };	Int32				GetOrtsKennung() const { return Int32(LStr255((char*)mAnlage.AnlDat.OrtsKennZif)); };	void				SetOrtsKennung(Int32 iOrt) { LStr2CStr(LStr255(iOrt), mAnlage.AnlDat.OrtsKennZif); };	LStr255				GetHotline() const { return LStr255((char*)mAnlage.AnlDat.Hotline); };	void				SetHotline(LStr255 &iHotline) { LStr2CStr(iHotline, mAnlage.AnlDat.Hotline); };	Int32				GetCodeNummer() const { return Int32(LStr255((char*)mAnlage.AnlDat.CodeNummer)); };	void				SetCodeNummer(Int32 iCode) { LStr2CStr(LStr255(iCode), mAnlage.AnlDat.CodeNummer); };	Int32				GetAnlageMessageOnHold() const { return mAnlage.AnlDat.Moh; };	void				SetAnlageMessageOnHold(UInt8 iMoh) { mAnlage.AnlDat.Moh = iMoh; };	Boolean				IndexToApp(SInt16 iAppIndex, SInt16 &oAnlage, SInt16 &oAppIndex) const;public:						CEuracom();	// IC File setzen	void				SetDefault(Boolean iOptionalFlag = false);	static Boolean		IsEuracomData(Handle inH); 	void				SetISDNData(Handle h); 	Handle				GetISDNData(); 	void				SetOptData(Handle h); 	Handle				GetOptData();	void				Auslesen();	void				Reset();#if !DEMO_VERSION	void				Senden();	void				ReadGeb();#endif	// Informationen über die Anlage	void				GetAnlagenName(LStr255 &oAnlageName) const;	Int32				GetAnlagenHersteller() const { return Anlage_Ackermann; };	Int32				GetVersion() const { return mSWVersion; };	void				GetVersionStr(LStr255 &oVersionStr) const { oVersionStr = mVersion; };	Int32				GetExtS0() const;	Int32				GetIntS0() const;	Int32				GetAB() const;	Int32				GetAppCount() const { return GetIntS0() * 10 + GetAB(); };	Int32				GetAnlageProtokoll() const { return 1; };	// nur Euro-ISDN möglich!	Int32				GetAnlagenTyp(Int16 iAnlage = 1) const;	// Informationen über die Apparate	Boolean				IsAppActive(SInt16 iAppIndex) const;	UInt16				GetAppNo(SInt16 iAppIndex) const;	void				GetAppName(SInt16 iAppIndex, LStr255 &oAppName) const; 	void				SetAppName(SInt16 iAppIndex, const LStr255 &iAppName);	Endgeraetedienst	GetAppDienst(SInt16 iAppIndex) const;	Endgeraeteberechtigung	GetAppBerechtigung(SInt16 iAppIndex) const;	Boolean				GetMasterberechtigung(SInt16 iAppIndex) const;	Boolean				GetAufschaltsperre(SInt16 iAppIndex) const;	Boolean				GetAufschalterlaubnis(SInt16 iAppIndex) const;	// Gebühren 	UInt16				GetAppGebCount() const { return MAX_RUF_VAR_LEN * 2; }	UInt16				GetAppGeb(SInt16 iAppIndex) const;	void				SetAppGeb(SInt16 iAppIndex, UInt16 theGebcount);	// Kurzwahlen	SInt16				GetKurzwahlCount() const { return ANZ_KW_NR; };	void				GetKurzwahl(SInt16 iKurzIndex, SInt16 &oAppKurzNo, LStr255 &oAppNummer, LStr255 &oAppName) const;	void				SetKurzwahl(SInt16 iKurzIndex, const LStr255 oAppNummer, const LStr255 oAppName);	// Sperrnummern	SInt16				GetSperrnummerCount() const { return ANZ_SPERR_NR; };	void				GetSperrnummer(SInt16 iIndex, LStr255 &oNummer) const;	void				SetSperrnummer(SInt16 iIndex, const LStr255 &oNummer);	// Nahbereichsnummern	SInt16				GetNahbereichsnummerCount() const { return ANZ_NAH_BER_NR; };	void				GetNahbereichsnummer(SInt16 iIndex, LStr255 &oNummer) const;	void				SetNahbereichsnummer(SInt16 iIndex, const LStr255 &oNummer);	// globale Dialoge, nunja...	void				AnlageInfoDialog();	void				GeraetInfoDialog(short geraet);private:	void				EditAppNo(LWindow *theDialog, MessageT hitMessage);	static UInt16		IntelSwap16(UInt16 iWord);	static void			IntelSwap16R(UInt16 &iWordRef);	static UInt32		IntelSwap32(UInt32 iLong);	static void			IntelSwap32R(UInt32 &iLongRef);	void				IntelSwap(EinrichtKonfig &ioKonfig);	void				GetCommand(StringPtr iBuf);	UInt16				CalcCRC(const void *iPtr, UInt16 iCount);	void				InitCommand();	void				SendCommand(UInt8 iCmd, const void *iData = nil, UInt16 len = 0);	void				SendAndRead(UInt8 iCmd, StringPtr oBuf, UInt8 iParam = 0x00);	char				CheckGoodApp(char inApp, Boolean retNull = false);	void				CheckData();};