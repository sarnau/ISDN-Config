// ===========================================================================//	CDragEditField.h//	Written by Edward A. Figarsky//	©1995 Edward A. Figarsky. All rights reserved.//	//	You may use this class in any non-commercial program without//	permission.  The only restriction is that you must credit the//	author in your about box.  For commercial use, please contact//	the author at the email address below.//	//	DESCRIPTION:	This class, which sub-classes LEditField and LDragAndDrop,//					adds drag and drop capabilities to editText fields in//					windows and dialogs.//					//					Note: When receiving a drop, the entire item's contents//					are replaced.//				//	Send bug-reports and comments to figarsky@voicenet.com//// ===========================================================================#pragma once#include <LEditField.h>#include <LDragAndDrop.h>#include <LDragTask.h>#include "PPFactory.h"class CDragEditField :	public LEditField,				 		public LDragAndDrop{	public:		static bool	sRegisterClass;	public:		enum { class_ID = 'ediD' };										CDragEditField();																CDragEditField(LStream *inStream);																CDragEditField(const CDragEditField	&inOriginal);									~CDragEditField();				virtual Boolean		ObeyCommand(									CommandT			inCommand,									void				*ioParam);	protected:			RgnHandle				mHiliteRegion;		Boolean					mHaveDragAndDrop;				virtual void			ClickSelf(const SMouseDownEvent	&inMouseDown);			virtual void			AdjustCursorSelf(Point				inPortPt,												const EventRecord	&inMacEvent);			virtual void			CreateDragEvent(const SMouseDownEvent &inMouseDown);			virtual void			HandleTrashDrop(LDragTask* inDragTask);					virtual Boolean			ItemIsAcceptable(DragReference	inDragRef,												 ItemReference	inItemRef);											virtual void			ReceiveDragItem(DragReference	inDragRef,												DragAttributes	inDragAttrs,												ItemReference	inItemRef,												Rect			&inItemBounds);		};